name: Auto Release on Merge

on:
  pull_request:
    types:
      - closed

jobs:
  release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Fetch the latest tags
    - name: Fetch tags
      run: git fetch --tags

    # Determine version bump type (patch, minor, major)
    - name: Determine version type
      id: version_type
      run: |
        # Default version type is patch
        VERSION_TYPE="patch"

        # Check PR labels for version type
        if echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q "minor"; then
          VERSION_TYPE="minor"
        elif echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q "major"; then
          VERSION_TYPE="major"
        fi

        echo "::set-output name=version_type::$VERSION_TYPE"
      shell: bash

    # Auto-increment version based on type
    - name: Auto-increment version
      id: version
      run: |
        # Get the latest tag (default to v0.2.4 if no tags exist)
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.2.4")
        echo "Latest tag: $LATEST_TAG"

        # Extract version numbers
        MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | tr -d 'v')
        MINOR=$(echo $LATEST_TAG | cut -d. -f2)
        PATCH=$(echo $LATEST_TAG | cut -d. -f3)

        # Determine new version based on type
        if [ "${{ steps.version_type.outputs.version_type }}" = "major" ]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [ "${{ steps.version_type.outputs.version_type }}" = "minor" ]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi

        # Generate new tag
        NEW_TAG="v$MAJOR.$MINOR.$PATCH"
        echo "New tag: $NEW_TAG"
        echo "::set-output name=new_tag::$NEW_TAG"

        # Create a new tag
        git tag $NEW_TAG
        git push origin $NEW_TAG

    # Create or update GitHub Release
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.new_tag }}
        name: "Release ${{ steps.version.outputs.new_tag }}"
        body: |
          ### Changes
          - Automatically generated release for ${{ steps.version_type.outputs.version_type }} update.
        draft: false
        prerelease: false
